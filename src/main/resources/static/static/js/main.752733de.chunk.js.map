{"version":3,"sources":["components/Options..js","components/Terms.js","components/SaveButton.js","services/generateTree.js","services/getClientData.js","services/submitData.js","services/dataVerification.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Options","tree","activeSectors","setActiveSectors","Select","multiple","native","value","onChange","event","options","target","i","l","length","selected","push","inputProps","id","map","sector","key","style","marginLeft","depth","Terms","terms","setTerms","FormControlLabel","control","Checkbox","checked","name","color","label","SaveButton","clientData","dataSubmit","Button","variant","onClick","generateTree","callback","fetch","then","response","json","data","sectorData","forEach","item","parentId","findChildren","result","children","child","createTree","getClientData","submitData","method","csrfToken","headers","body","JSON","stringify","window","location","reload","dataVerification","nameOk","activeSectorsOk","termsOk","firstName","alert","Form","React","useState","setTree","setClientData","setName","Cookies","get","useEffect","sectors","noValidate","autoComplete","className","TextField","dataOk","App","Container","Typography","gutterBottom","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.752733de.chunk.js","sourcesContent":["import React from 'react';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nfunction Options({tree, activeSectors, setActiveSectors}) {\r\n\r\n    const handleChangeMultiple = (event) => {\r\n        let {options} = event.target;\r\n        let value = [];\r\n        for (let i = 0, l = options.length; i < l; i += 1) {\r\n            if (options[i].selected) {\r\n                value.push(options[i].value);\r\n            }\r\n        }\r\n        setActiveSectors(value);\r\n    }\r\n\r\n    return (\r\n        <Select\r\n            multiple\r\n            native\r\n            value={activeSectors}\r\n            onChange={handleChangeMultiple}\r\n            inputProps={{\r\n                id: 'select-multiple-native'\r\n            }}\r\n        >\r\n            {tree.map((sector) => (\r\n                <option key={sector.id} value={sector.id} style={{marginLeft: sector.depth + 'em'}}>\r\n                    {sector.sector}\r\n                </option>\r\n            ))}\r\n        </Select>\r\n    );\r\n}\r\n\r\nexport default Options;\r\n","import React from \"react\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nfunction Terms({terms, setTerms}) {\r\n\r\n    const handleChange = (event) => {\r\n        setTerms(event.target.checked);\r\n    };\r\n\r\n    return (\r\n        <FormControlLabel\r\n            control={<Checkbox\r\n                checked={terms}\r\n                onChange={handleChange}\r\n                name=\"terms\"\r\n                color=\"primary\"\r\n            />}\r\n            label=\"Agreed to terms\"\r\n        />\r\n    )\r\n\r\n}\r\n\r\nexport default Terms;","import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction SaveButton({clientData, dataSubmit}) {\r\n    return (\r\n        <Button variant=\"contained\" onClick={dataSubmit}>Save</Button>\r\n    )\r\n}\r\n\r\nexport default SaveButton;","function generateTree(callback) {\r\n    fetch('http://localhost:8080/sector', {})\r\n        .then(response => response.json())\r\n        .then(data => createTree(data, callback));\r\n}\r\n\r\nfunction createTree(sectorData, callback) {\r\n    let tree = [];\r\n\r\n    sectorData.forEach(item => {\r\n        let depth = 0;\r\n        if (item.parentId === null) {\r\n            tree.push({\r\n                id: item.id,\r\n                sector: item.sector,\r\n                parentId: item.parentId,\r\n                depth: depth\r\n            })\r\n\r\n            let children = findChildren(sectorData, item.id, depth+1);\r\n\r\n            children.forEach(child => {\r\n                tree.push(child);\r\n            });\r\n\r\n        }\r\n    })\r\n    callback(tree)\r\n}\r\n\r\nfunction findChildren(sectorData, parentId, depth) {\r\n    let result = [];\r\n    sectorData.forEach(item => {\r\n        if (item.parentId === parentId) {\r\n            let children = findChildren(sectorData, item.id, depth+1);\r\n\r\n            result.push({\r\n                id: item.id,\r\n                sector: item.sector,\r\n                parentId: item.parentId,\r\n                depth: depth\r\n            })\r\n\r\n            children.forEach(child =>{\r\n                result.push(child)\r\n            });\r\n        }\r\n    })\r\n    return result;\r\n}\r\n\r\nexport default generateTree;","function getClientData(callback) {\r\n        fetch('http://localhost:8080/client', {})\r\n            .then(response => response.json())\r\n            .then(data => callback(data));\r\n}\r\n\r\nexport default getClientData;","function submitData(method, csrfToken, data) {\r\n    fetch('http://localhost:8080/client', {\r\n        method: method,\r\n        headers: {\r\n            'X-XSRF-TOKEN': csrfToken,\r\n            'Content-Type': 'application/json',\r\n            'credentials': 'include'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n    window.location.reload(false);\r\n\r\n}\r\n\r\nexport default submitData;","function dataVerification(data) {\r\n    let nameOk;\r\n    let activeSectorsOk;\r\n    let termsOk;\r\n\r\n    if (data.firstName) {\r\n        nameOk = true\r\n    } else {\r\n        nameOk = false\r\n        alert('Please enter name.')\r\n    }\r\n\r\n    if (data.activeSectors) {\r\n        activeSectorsOk = true\r\n    } else {\r\n        activeSectorsOk = false\r\n        alert('Please select sectors you are involved.')\r\n    }\r\n\r\n    if (data.terms) {\r\n        termsOk = true\r\n    } else {\r\n        termsOk = false\r\n        alert('Please agree with the terms.')\r\n    }\r\n\r\n    if (nameOk && activeSectorsOk && termsOk) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport default dataVerification;","import React, {useEffect} from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Options from \"./Options.\";\r\nimport Terms from \"./Terms\";\r\nimport SaveButton from \"./SaveButton\";\r\nimport Cookies from 'js-cookie';\r\nimport generateTree from \"../services/generateTree\";\r\nimport getClientData from \"../services/getClientData\";\r\nimport submitData from \"../services/submitData\";\r\nimport dataVerification from \"../services/dataVerification\";\r\n\r\nfunction Form() {\r\n    const [tree, setTree] = React.useState([]);\r\n    const [clientData, setClientData] = React.useState({});\r\n    const [name, setName] = React.useState('');\r\n    const [activeSectors, setActiveSectors] = React.useState([]);\r\n    const [terms, setTerms] = React.useState(false);\r\n    let csrfToken = Cookies.get('XSRF-TOKEN')\r\n\r\n    useEffect(() => {\r\n        generateTree(setTree);\r\n        getClientData(setClientData);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setName(clientData.firstName);\r\n        setActiveSectors(clientData.sectors);\r\n        setTerms(clientData.terms);\r\n    }, [clientData])\r\n    const nameChangeHandler = (event) => {\r\n        setName(event.target.value);\r\n    }\r\n\r\n    const data = {\r\n        firstName: name,\r\n        activeSectors: activeSectors,\r\n        terms: terms\r\n    }\r\n\r\n    const dataSubmit = () => {\r\n        let dataOk = dataVerification(data);\r\n\r\n        if (clientData.terms === false && dataOk) {\r\n            submitData('POST', csrfToken, data);\r\n        } else if (clientData.terms !== false && dataOk) {\r\n            submitData('PUT', csrfToken, data);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form noValidate autoComplete=\"off\">\r\n            <div className=\"gaps-small\">\r\n                <TextField\r\n                    id=\"name\" label=\"Name\"\r\n                    value={name}\r\n                    onChange={nameChangeHandler}\r\n                    variant=\"filled\"\r\n                />\r\n            </div>\r\n\r\n            <div className=\"gaps-small\">\r\n                <Options\r\n                    tree={tree}\r\n                    activeSectors={activeSectors}\r\n                    setActiveSectors={setActiveSectors}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"gaps-small\">\r\n                <Terms\r\n                    terms={terms}\r\n                    setTerms={setTerms}\r\n                />\r\n\r\n                <SaveButton\r\n                    clientData={clientData}\r\n                    dataSubmit={dataSubmit}\r\n                />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Form from \"./components/Form\";\nimport './styles/App.css';\n\n\nfunction App() {\n    return (\n        <Container className='App'>\n            <div className=\"gaps\">\n                <Typography variant=\"h5\" gutterBottom>\n                    Please enter your name and pick the Sectors you are currently involved in.\n                </Typography>\n            </div>\n\n            <div className=\"gaps\">\n                <Form />\n            </div>\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}